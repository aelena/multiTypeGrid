/*  
*  tablebuilder.js version 0.0.1 ( alpha )
*  (c) 2012 PwC / Developed by A.E.B.
*/

var PwC_ClientFWK_Tables = {};

(function (namespace) {

    /* --- private variables ----------------------------------------------------------------------------------------- */

    /* these are private variables 
       that cannot be set or get from ourside the scope 
       to add public vars that you need to see outside the scope
       use block immediately below 
    */
        var emptySet = ['', null, undefined],                      // set of elements to be ignored in operations - think of them as all null for the purposes here
        htmloutput,                                             // accumulator for all html output generated by the engine
        initializeFlag,                             // internal control flag
        firstColIsCheckbox = false,                             // internal control flag
        tableID,
        tableName,
        totalRowCount,                              // internal counter to know the total length of data rows
        rowcounter = 0,
        colcounter = 0,
        linkTemplate = "<a href='#{href}' id='#{id}' class='#{class}' #{additional}>#{value}</a>",
        divPageTemplate = "<div id='#{id}' class='#{class}' #{additional}>",
        _currentPage = 0,
        _numRows,                   // we can calculate counting number of rows
        _numPages,
        _pageSize,
        _tableConfiguration,        // local copy of the configuration object passed by client
        _headConfiguration,         // id.
        _rowConfiguration,          // id.
        _data,
        _rawData,
        _sortingFlag = false,    
        _callerFunction,
        _reverseSort = false,
        // this is the template for the pager link
        _linkCellTemplate = "<td><span id='#{id}' class='#{class}' onclick='#{onclick}' title='#{title}'>#{value}</span></td>";


    /* --- end of private variable declaration ----------------------------------------------------------------------- */

    /* --- public variables ------------------------------------------------------------------------------------------ */
    /* add public vars here - use the following syntax with namespace preceding the var name */

    // namespace.PublicVar = '';

    /* --- end of public variable declaration ------------------------------------------------------------------------ */


    /*
     *   a 'fake enum' - no enums in js - to control the type of control to render inside a cell
     */
    CELLCONTROL = {

        BUTTON: { enumvalue: 0, code: "bt", template: "<input id='#{id}' type='button' value='#{data}' #{additional} />" },
        TEXTBOX: { enumvalue: 1, code: "tb", template: "<input id='#{id}' type='text' value='#{data}' #{additional} />" },
        DROPDOWN: { enumvalue: 2, code: "dd", template: " <select id='#{id}' ><option>#{data}</option></select>" },
        CHECKBOX: { enumvalue: 3, code: "cb", template: "<input id='#{id}' type='checkbox' checked='#{data}' #{additional}>#{value}</input>" },
        LINK: { enumvalue: 4, code: "li", template: "<a href='#{href}' id='#{id}' class='#{class}' #{additional}>#{value}</a>" },
        IMAGE: { enumvalue: 5, code: "im", template: "<img alt='#{alt}' src='#{src}' class='#{class}' #{additional}/>" },
        IMAGELINK: { enumvalue: 6, code: "il", template: "<a href='#{href}' id='#{id}' #{additional}><img alt='#{alt}' src='#{src}' class='#{class}' #{additional}>#{data}</a></img>" },
        HIDDEN: { enumvalue: 7, code: "hi", template: "<input id='#{id}' type='hidden' value='#{data}' #{additional}/>" },
        LABEL: { enumvalue: 8, code: "lb", template: "#{data}" },
        SPAN: { enumvalue: 9, code: "sp", template: "<span id='#{id}' #{additional}>#{data}</span>" }

    };


    // -------------------------------------------------------------------------------------------------------------------------

    /*
    Class: TableConfiguration 
    A class that represents basic configuration for the <table> label of the table being built
    This class must be instantiated by the caller and passed to the buildTable function.
        
    *Example*

    var t = new this.TableConfiguration("vendortable", "vendortable_name", "fullsizetable");

    As can be seen in the above example, some parameters can be left undefined and the engine will ignore them
    when emitting output.

     
    */

    /* ----------------------------------------------------------------------------------------------------------------------------- */
    /* --- BLOCK OF CONFIGURATION OBJECTS FOR TABLE CREATION ----------------------------------------------------------------------- */
    /* ----------------------------------------------------------------------------------------------------------------------------- */

    namespace.TableConfiguration = function TableConfiguration(tableID /* mandatory */, 
                                                               tableName /* mandatory */, 
                                                               tableCSSClass /* mandatory */, 
                                                               additionalStyle /* optional */, 
                                                               additionalMarkup /* optional */,
                                                               enablePagination /* optional - boolean */,
                                                               pageSize /* optional - int */ ) {
        /*
            value for the ID attribute of the emitted table 
        */
        tableID = this.tableID = tableID;
        /*
            value for the name attribute of the emitted table 
        */
        tableName = this.tableName = tableName;
        /*
            value for the class attribute of the emitted table 
        */
        this.tableCSSClass = tableCSSClass;
        /*
            value for an optional additional style attribute of the emitted table (can be ignored and not sent 
        */
        this.additionalStyle = additionalStyle;
        /*
            value for any additional markup that might be needed
        */
        this.additionalMarkup = additionalMarkup;
        /*
            value for indicating whether we want to enable pagination of results or not 
        */
        this.enablePagination = enablePagination;
        /*
            size of pages - needs that enablePagination is true
        */ 
        _pageSize = this.pageSize = pageSize;

    };


    // -------------------------------------------------------------------------------------------------------------------------


    namespace.TableHeadConfiguration = function TableHeadConfiguration(tableHeadID /* mandatory */, 
                                                                       tableHeadName /* mandatory */, 
                                                                       tableHeadCSSClass /* mandatory */,
                                                                       additionalStyle, /* optional style attributes (not checked for validity) */
                                                                       additionalMarkup, /* optional */  /* - additional html to include in tag (not checked for validity) */
                                                                       columnNames, /* mandatory */ 
                                                                       includeCheckBoxInColumnZero, /* optional - pass true to indicate the creation of a column with checkboxes */
                                                                       hiddenColumnNames /* not mandatory - put here the names of columns that have to be hidden, if any */) {

        /*
            value for the ID attribute of the emitted table 
        */
        this.tableHeadID = tableHeadID;
        /*
            value for the name attribute of the emitted table 
        */
        this.tableHeadName = tableHeadName;
        /*
            value for the class attribute of the emitted table 
        */
        this.tableHeadCSSClass = tableHeadCSSClass;
        /*
            value for an optional additional style attribute of the emitted head element (can be ignored and not sent)
        */
        this.additionalStyle = additionalStyle;
        /*
            value for any additional markup that might be needed
        */
        this.additionalMarkup = additionalMarkup;
        /*
            double array (array of K,V) with column ID's and literals to be shown on the generated table
        */
        this.columnNames = columnNames;
        /*
            Value that indicates if we want to have a first (left hand side) column that is a checkbox for row selection
        */
        firstColIsCheckbox = this.includeCheckBoxInColumnZero = includeCheckBoxInColumnZero;
        /*
            Optional array of columns that we want to be in the table but must remain hidden in the final table
        */
        this.hiddenColumnNames = hiddenColumnNames;

    };


    // -------------------------------------------------------------------------------------------------------------------------


    namespace.TableRowConfiguration = function TableRowConfiguration(tableRowID /* mandatory */,
                                                                     tableRowClass /* mandatory */,
                                                                     additionalStyle /* optional */,
                                                                     additionalMarkup /* optional */,
                                                                     cellconfigurations /* array - mandatory */) {

        this.tableRowID = tableRowID;
        /*
            Indicates the Css Class for the rows of the table 
        */
        this.tableRowClass = tableRowClass;
        /*
            value for an optional additional style attribute of the emitted cell elements of the row.
        */
        this.additionalStyle = additionalStyle;
        /*
            Array of cell control items that indicate the structure of the table rows (each cell one control)
        */
        this.cellconfigurations = cellconfigurations;
        /*
            value for any additional markup that might be needed
        */
        this.additionalMarkup = additionalMarkup;

    };


    /* ----------------------------------------------------------------------------------------------------------------------------- */
    /* --- END OF BLOCK OF CONFIGURATION OBJECTS FOR TABLE CREATION ---------------------------------------------------------------- */
    /* ----------------------------------------------------------------------------------------------------------------------------- */




    /* ----------------------------------------------------------------------------------------------------------------------------- */
    /* --- BLOCK OF FUNCTIONS FOR TABLE CREATION ----------------------------------------------------------------------------------- */
    /* ----------------------------------------------------------------------------------------------------------------------------- */

    /*
        Builds the opening table tag   
    */
    namespace.buildTableTag = function (configuration /* this is a configuraiton object (instance of TableConfiguration in literal notation, see doc */) {

        // check we have the mandatory options set before building anything
        if (this.checkConfigurationObject('buildTableTag', configuration, ['tableID', 'tableName', 'tableCSSClass'])) {
            
            // create template for the tag
            var template = "<table id='#{tableID}' name='#{tableName}' class='#{tableCSSClass}'";
            // additionally, if we have extra information regarding style, paste it here into the template
            if (!_.contains(emptySet, configuration.additionalStyle)){
                template += " style='#{additionalStyle}'";
            }
            template += ">";
            // initialize buffer creation
            this.initialize();         
            // render to the output buffer interpolating template and configuration object data    
            return htmloutput.append( template.interpolate(configuration) );

        }

    };   // --- end of buildTableTag --------------------------------------------------------------------------


    // -------------------------------------------------------------------------------------------------------------------------


    /*
        Builds the table header row according to the configuration object
    */
    namespace.buildTableHead = function (configuration /* this is a configuraiton object (instance of TableHeadConfiguration in literal notation, see doc */) {

        // check we have the mandatory options set before building anything
        if (this.checkConfigurationObject('buildTableHead', configuration, ['tableHeadID', 'tableHeadName', 'tableHeadCSSClass', 'columnNames'])) {
            
            var    template = "<thead id='#{tableHeadID}' name='#{tableHeadName}' class='#{tableHeadCSSClass}'";    // defines template for th tr
            // additionally, if we have extra information regarding style, paste it here into the template
            if (!_.contains(emptySet, configuration.additionalStyle)) {
                template += " style='#{additionalStyle}'";
            }
           
            if (!_.contains(emptySet, configuration.additionalMarkup)) {                     // is there any additional markup?
                template += " " + configuration.additionalMarkup;
            }


            template += "><tr>";

            this.initialize();

            htmloutput.append( template.interpolate(configuration) );   // interpolate template before proceeding to append the th cells

            // now we must see if the configuration object has the option to create a first column (index zero) to include in it a
            // checkbox that permits the user check every row ('select all' functionality)
            if ( configuration.includeCheckBoxInColumnZero === true ) {
                htmloutput.append("<th><input id='" + configuration.tableHeadName + "_cboxSelectAll' type='checkbox'></th>");
            }

            // iterate the collection of K,V column information, and check if there are any of the ID's that 
            // are also specified in the 'hiddenColumns' array, and in that case, hide them
            _.each(configuration.columnNames, function (col) {
                if ( $.inArray(col[0], configuration.hiddenColumnNames) >= 0 ){
                    htmloutput.append( "".concat("<th id='th_", col[0], "' style='display:none'") );
                }
                else{
                    htmloutput.append( "".concat("<th id='th_", col[0], "'") );
                }

                // add on click for header
                htmloutput.add(" onclick=\"PwC_ClientFWK_Tables.").add("tableBuilderHeaderClick('").add('#th_').add(col[0]).add("');\"");

                // see if this field was specified a data field for sorting 
                if ( col[2] !== undefined ){
                    htmloutput.add("data-item-field='").add(col[2]).add("'");
                }

                // add the title literal and close tag
                htmloutput.add(">").add(col[1]).add("</th>");
                 
            });

            // append final tags and return output buffer
            return htmloutput.append ( "</tr></thead>" );

        }

    };  // --- end of buildTableHead ----------------------------------------------------------------------


    // -------------------------------------------------------------------------------------------------------------------------


    namespace.buildTableRow = function (configuration /* this is a configuraiton object (instance of TableRowConfiguration in literal notation, see doc */,
                                        data /* json block that contains data sent in the correct format by the caller to bind against templates */ ) {

    
        colcounter = 0;                 // reset counter ( counter is 'global' at object level)
                    
        if (this.checkConfigurationObject('buildTableRow', configuration, ['tableRowID', 'tableRowClass', 'cellconfigurations'])) {
    

            var template = "<tr id='#{tableRowID}_" + rowcounter +"' class='#{tableRowClass}'";    // defines template for th tr
            // additionally, if we have extra information regarding style, paste it here into the template
            if (!_.contains(emptySet, configuration.additionalStyle)){
                template += " style='#{additionalStyle}'";
                }
            if (!_.contains(emptySet, configuration.additionalMarkup)){
                template += " " + configuration.additionalMarkup;
                }
            // close tag
            template += ">";

            this.initialize();

            htmloutput.append ( template.interpolate(configuration));   // interpolate template before proceeding to append the th cells

            if ( firstColIsCheckbox === true ) 
                htmloutput.append("<td><input id='cboxSelectorRow_" + rowcounter +  "' type='checkbox'></td>");

            _.each(configuration.cellconfigurations, function (c) {
                var    cellid;
                cellid = "row_" + rowcounter + "_" + colcounter;
                htmloutput.add("<td id=" + cellid + "'>");
                // apart from the automatic generation of row and column indicator
                // it's important also to attach the id specified from the client to allow for 
                // easy jquery manipulation and DOM access
                data[colcounter].id =data[colcounter].id + "__" + cellid;

                htmloutput.add(c.template.interpolate(data[colcounter++]));
                htmloutput.add("</td>")
            });
            
            rowcounter++;
            
            return htmloutput.add( "</tr>" );

         
        }

    };


    // -------------------------------------------------------------------------------------------------------------------------


    namespace.initialize = function () {
        if ( initializeFlag === undefined ) {
            htmloutput = new StringBuilder();
            initializeFlag = true;
        }
    };


    // -------------------------------------------------------------------------------------------------------------------------


    /*
        this function drives the creation of the table, by receving all the configuration objects
        for the different parts of the table, plus the complete array of data.
        Additionally, we can specify the current page to render and the number of rows per page if we want
        pagination. We can skip passing these arguments, and the whole of the table will be rendered
    */
    namespace.buildTable = function ( tableConfiguration /* mandatory */, 
                                      headConfiguration /* mandatory */, 
                                      rowConfiguration /* mandatory */, 
                                      data /* mandatory */,
                                      rawData /* mandatory */,
                                      callerFunction ) {
        
        this.initialize();

        _tableConfiguration = tableConfiguration;
        _headConfiguration = headConfiguration;
        _rowConfiguration = rowConfiguration;
        _data = data;
        _rawData = rawData;
        _callerFunction = callerFunction;
        
        htmloutput.clear().add ( this.buildTableTag(tableConfiguration) );
        htmloutput.add ( this.buildTableHead(headConfiguration));
        if( rowConfiguration !== null ) {
            htmloutput.add ( "<tbody>");

                _.each(data, function (item) {
                    htmloutput.add(PwC_ClientFWK_Tables.buildTableRow(rowConfiguration, item));
                });

            htmloutput.add ( "</tbody>");

            // do the paging only if it is asked for and we have enough rows
            if ( tableConfiguration.enablePagination === true && data.size() > tableConfiguration.pageSize ) {
               
                this.buildPagerControl(Math.ceil(data.size() / tableConfiguration.pageSize),  data.size());

            }   
        }

        return htmloutput;

    };


    namespace.buildPagerControl = function(__pageCount, __datasize ){

        var i, threshold = 20;

         // if pagination enabled then inject pager links in footer
                htmloutput.add ( "<div class='tblbuilderpaginator' data-page-count='").add(__pageCount).add("' id='tblpagerdiv'>");
                htmloutput.add ( '<table id=').add('tblbuilderPagertable').add('>' ).add('<tr>');
                htmloutput.add (_linkCellTemplate.interpolate({'id':'__firstPageLink', 'onclick':'PwC_ClientFWK_Tables.gotoPage("first");', 'value':'&lt;&lt; first'}));
                htmloutput.add (_linkCellTemplate.interpolate({'id':'__backPageLink', 'onclick':'PwC_ClientFWK_Tables.gotoPage("prev");', 'value':'&lt; previous'}));
                
                    for(i = 0; i < __pageCount; i++ ){
                        htmloutput.add (_linkCellTemplate.interpolate({'id':'__' + 'PageLink' + i, 'onclick':'PwC_ClientFWK_Tables.gotoPage(' + i +');', 'value': i+1}));
                    }

                    if ( __pageCount > threshold ){
                        htmloutput.add("<td><span id='_more_'>...</span></td>");
                    }

                htmloutput.add (_linkCellTemplate.interpolate({'id':'__advancePageLink', 'onclick':'PwC_ClientFWK_Tables.gotoPage("next");', 'value':'next &gt;'}));
                htmloutput.add (_linkCellTemplate.interpolate({'id':'__lastPageLink', 'onclick':'PwC_ClientFWK_Tables.gotoPage("last");', 'value':'last &gt;&gt;'}));
                htmloutput.add('</tr>').add ( '</table>' ).add('</div>');

    };


    /*
        this function handles the clicking on the table headers
        for sorting the registers
    */
    namespace.tableBuilderHeaderClick = function(element) {
    
        /*
            get which field of the business data objects we want to sort by
            as set up previously when generating the formatted data
            now we read the attribute to understand which property of the data 
            objects must be used for sorting
        */
        var _field  = $(element).attr('data-item-field'),
            _newTable;

        // take advantage of the sort method of Array and implement the comparison inside here
        Array.prototype.sort.call(_rawData, function(a, b)
        {
            if (a[_field] < b[_field])
                return -1;
            if (a[_field] > b[_field])
                return 1;
            return 0;
        });

        // toggle the flag for order reversal using the basic Array reverse implementation
        if ( _reverseSort ) {
            Array.prototype.reverse.call(_rawData);
            _reverseSort = false;
        }
        else{
            _reverseSort = true;
        }

        /*
            redraw the table with the copies of the original configuration objects
            plus the data in formatted and raw formats
            Also keeping the reference to the function passed by the caller
            to handle the painting and binding the appropiate events
        */
        _newtable = this.buildTable( _tableConfiguration, _headConfiguration, _rowConfiguration, _data, _rawData, _callerFunction );
        
        /* 
            call the original function passed from the calling js to repaint
            the table, handle the events (for the lookup), dumping the generated table
            to the div etc.
        */
        _callerFunction();
        

    };

    


    /* ----------------------------------------------------------------------------------------------------------------------------- */
    /* --- END OF BLOCK OF FUNCTIONS FOR TABLE CREATION ---------------------------------------------------------------------------- */
    /* ----------------------------------------------------------------------------------------------------------------------------- */



    namespace.gotoPage = function(x, id){

        if ( !_tableConfiguration.enablePagination ) {
            return;
        }

        if(_numRows === undefined)
            _numRows = $('#tblIRC tr[id^="tablerow__"]').size();
        if (_numPages === undefined)
            _numPages = Math.ceil(_numRows / _pageSize);
           

        if (isNaN(Number(x))) {
            
            switch (x) {
                case 'first':
                    _currentPage = 0;                    
                    break;
                case 'prev':
                    _currentPage -= 1;
                    if (_currentPage < 0) 
                        _currentPage = 0;
                    break;
                case 'next':
                    _currentPage += 1;
                    if (_currentPage >= _numPages)
                        _currentPage = _numPages - 1;
                    break;
                case 'last':
                    _currentPage = _numPages - 1;
                    break;
            }

            id = '#__PageLink' + _currentPage;
        }
        else {
            _currentPage = x;
        }


        id = '#__PageLink' + _currentPage;

        $('#tblIRC tr[id^="tablerow__"]').each(function (index, row) {
            if (index >= _currentPage * _pageSize && index < ((_currentPage * _pageSize) + _pageSize)) {
                $('#' + row.id).css('display', 'inline');
            }
            else {
                $('#' + row.id).css('display', 'none');
            }
        });


        $('#tblbuilderPagertable [id^="__PageLink"]').css('text-decoration', 'none');
        $('#tblbuilderPagertable [id^="__PageLink"]').css('font-weight', 'normal');

        if ( id !== undefined){
            $(id).css('font-weight','bold');
            $(id).css('text-decoration', 'underline');
        }


    };
     
    /* ----------------------------------------------------------------------------------------------------------------------------- */
    /* --- PRIVATE AUXILIARY FUNCTIONS --------------------------------------------------------------------------------------------- */
    /* ----------------------------------------------------------------------------------------------------------------------------- */

    /*
    Returns closing tag
    */
    function closeTag(tag) {
        return "</" + tag + ">";
    };

    // -------------------------------------------------------------------------------------------------------------------------


    namespace.clearBuffer = function (){
        if ( htmloutput !== undefined ) {
            htmloutput.clear();
        }
    };

    /*
    Checks for the validity of a configuration object
    */
    namespace.checkConfigurationObject = function (functionName, configurationItem, listOfFieldsToCheckFor) {

        /*
        first check if the object is valid and not a null reference or undefined
        */
        if (configurationItem === null || configurationItem === undefined){
            throw new Error(namespace + '.' + functionName + '(configuration) --> configuration parameter was null');
        }
        /* 
        check that the mandatory properties are present in the object 
        */
        _.each(listOfFieldsToCheckFor, function (item) {
            if (!configurationItem.hasOwnProperty(item)) {
                throw new Error(namespace + '.' + functionName + '(configuration) --> configuration object not of the right kind.');
            }
        });

        return true;

    };   // --- end of PwC_ClientFWK_Tables.checkConfigurationObject -----------------------------------

    // -------------------------------------------------------------------------------------------------------------------------


    /*
        workaround for tracing to the console log in IE 8 only works when the console is already open in dev tools F12
        otherwise show alert 
        remember to comment out alert branch in production
    */
    function trace(s) {
        if ('console' in self && 'log' in console) {
            console.log(s);
        }
        else {
            alert(s);
        }
    };


    /* ----------------------------------------------------------------------------------------------------------------------------- */
    /* --- END OF BLOCK OF PRIVATE AUXILIARY FUNCTIONS ----------------------------------------------------------------------------- */
    /* ----------------------------------------------------------------------------------------------------------------------------- */


})(PwC_ClientFWK_Tables);    // end of IIFE
